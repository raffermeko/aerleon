apiVersion: networking.k8s.io/v1
items:
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: Allow SSH access to all pods from company.
    name: test-ssh
  spec:
    ingress:
    - from:
      - ipBlock:
          cidr: 200.1.1.3/32
      ports:
      - port: 22
        protocol: TCP
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: Allow HTTP to pods
    name: test-web
  spec:
    ingress:
    - from:
      - ipBlock:
          cidr: 0.0.0.0/0
      ports:
      - port: 80
        protocol: TCP
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: Allow TCP/UDP access to all pods from company.
    name: test-multiple-protocols
  spec:
    ingress:
    - from:
      - ipBlock:
          cidr: 200.1.1.3/32
      ports:
      - endPort: 65535
        port: 1024
        protocol: TCP
      - endPort: 65535
        port: 1024
        protocol: UDP
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: Allow all tcp and sctp.
    name: test-multiple-protocols-tcp-sctp
  spec:
    ingress:
    - from:
      - ipBlock:
          cidr: 200.1.1.3/32
      ports:
      - protocol: TCP
      - protocol: SCTP
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: Allow all network internal traffic.
    name: test-internal
  spec:
    ingress:
    - from:
      - ipBlock:
          cidr: 10.0.0.0/8
      - ipBlock:
          cidr: 172.16.0.0/12
      - ipBlock:
          cidr: 192.168.0.0/16
      ports:
      - protocol: TCP
      - protocol: UDP
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: this is a sample policy to generate Kubernetes NetworkPolicy filter
    name: default-deny
  spec:
    podSelector: {}
    policyTypes:
    - Ingress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: Outbound to Mail Server
    name: test-egress-address-e
  spec:
    egress:
    - ports:
      - port: 25
        protocol: TCP
      to:
      - ipBlock:
          cidr: 200.1.1.4/32
      - ipBlock:
          cidr: 200.1.1.5/32
    podSelector: {}
    policyTypes:
    - Egress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: Outbound to RFC1918
    name: test-egress-tag-e
  spec:
    egress:
    - ports:
      - port: 22
        protocol: TCP
      to:
      - ipBlock:
          cidr: 200.1.1.3/32
    podSelector: {}
    policyTypes:
    - Egress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: Outbound to IPv6 Server
    name: test-egress-address-v6-only-e
  spec:
    egress:
    - ports:
      - port: 25
        protocol: TCP
      to:
      - ipBlock:
          cidr: 2606:700:e:550:b01a::b00a/128
    podSelector: {}
    policyTypes:
    - Egress
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
      comment: this is a sample policy to generate EGRESS Kubernetes NetworkPolicy
        filter
    name: default-deny-e
  spec:
    podSelector: {}
    policyTypes:
    - Egress
kind: NetworkPolicyList
